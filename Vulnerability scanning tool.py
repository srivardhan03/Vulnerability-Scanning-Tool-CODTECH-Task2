import socket
import requests
import threading
import time
import re

def scan_ports(target, start_port, end_port):
    open_ports = []
    ip = socket.gethostbyname(target)
    print(f"Scanning ports {start_port}-{end_port} on {target}...")
    
    for port in range(start_port, end_port + 1):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(1)
            result = sock.connect_ex((ip, port))
            if result == 0:
                open_ports.append(port)
                print(f"Port {port} is open")
        # Simulate delay for each port scan
        time.sleep(0.5)
    return open_ports

def check_outdated_software(url):
    try:
        print("Checking for outdated software...")
        time.sleep(2)  # Simulate delay
        print("Fetching software information...")
        time.sleep(2)  # Simulate delay
        response = requests.get(url)
        server_header = response.headers.get('Server')
        if server_header:
            return f"Server header: {server_header}"
        else:
            return "No server header found."
    except requests.RequestException as e:
        return f"Request error: {e}"

def check_misconfigurations(url):
    misconfigurations = []
    try:
        print("Checking for misconfigurations...")
        time.sleep(2)  # Simulate delay
        print("Analyzing security headers...")
        time.sleep(2)  # Simulate delay
        response = requests.get(url)
        headers = response.headers

        # Check for missing security headers
        if 'X-Frame-Options' not in headers:
            misconfigurations.append("X-Frame-Options header is missing.")
        if 'X-Content-Type-Options' not in headers:
            misconfigurations.append("X-Content-Type-Options header is missing.")
        if 'Content-Security-Policy' not in headers:
            misconfigurations.append("Content-Security-Policy header is missing.")
        if 'Strict-Transport-Security' not in headers:
            misconfigurations.append("Strict-Transport-Security header is missing.")

        # Check for outdated or insecure protocols
        if response.url.startswith("http://"):
            misconfigurations.append("Insecure protocol (HTTP) used instead of HTTPS.")
        
        # Check for unnecessary headers
        if 'Server' in headers:
            misconfigurations.append(f"Server header present: {headers['Server']}. This can reveal server information.")

        if not misconfigurations:
            misconfigurations.append("No misconfigurations found.")
        return misconfigurations
    except requests.RequestException as e:
        return f"Request error: {e}"

def scan_network(target):
    open_ports = []
    threads = []
    ports_per_thread = 64
    num_threads = (1024 // ports_per_thread) + 1

    for i in range(num_threads):
        start_port = i * ports_per_thread + 1
        end_port = min((i + 1) * ports_per_thread, 1024)
        thread = threading.Thread(target=lambda: open_ports.extend(scan_ports(target, start_port, end_port)))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()
    
    return open_ports

def is_valid_ip(ip):
    pattern = re.compile(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
    return pattern.match(ip)

def is_valid_url(url):
    pattern = re.compile(r"^(http://|https://)")
    return pattern.match(url)

def main():
    print("\nVulnerability Scanner\n")
    
    target = input("Enter the target IP address or URL: ").strip()
    
    if is_valid_url(target):
        print(f"\nTarget URL: {target}\n")
        outdated_software = check_outdated_software(target)
        print(outdated_software)
        
        print("\nPlease wait while we check for misconfigurations...\n")
        time.sleep(2)  # Additional delay before starting misconfigurations check
        
        misconfigurations = check_misconfigurations(target)
        for misconfiguration in misconfigurations:
            print(misconfiguration)
    elif is_valid_ip(target):
        print(f"\nTarget IP: {target}\n")
        start_time = time.time()
        open_ports = scan_network(target)
        elapsed_time = time.time() - start_time
        if open_ports:
            print(f"\nOpen ports: {open_ports}")
        else:
            print("No open ports found.")
        print(f"Port scanning completed in {elapsed_time:.2f} seconds")
    else:
        print("Invalid input. Please enter a valid IP address or URL starting with http:// or https://")
    
    input("\nThere might be malicious activity")

if __name__ == "__main__":
    main()

